#include <windows.h>
#include <stdio.h>

#include "pe_virtual_to_raw.h"

void hexdump(BYTE *buf, size_t size)
{
    for (int i = 0; i < size; i++) {
        printf("%02x ",buf[i]);
    }
    printf("\n");
}

bool remap_pe_file(IN const char* filename, IN const char* out_filename)
{
    if (filename == NULL || out_filename == NULL) return false;

    FILE *f = fopen(filename, "rb");
    if (!f) return false;

    printf("filename: %s\n", filename);

    fseek(f,0, SEEK_END);
    size_t size = ftell(f);
    printf("size = %d\n", size);
    BYTE* in_buf = (BYTE*) VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    BYTE* out_buf = (BYTE*) VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    fseek(f, 0, SEEK_SET);
    fread(in_buf, 1, size, f);
    fclose(f);

    sections_raw_to_virtual(in_buf,size,out_buf);

    f = fopen(out_filename, "wb");
    if (!f) return false;

    fwrite(out_buf, 1, size, f);
    fclose(f);

    VirtualFree(in_buf, size, MEM_FREE);
    VirtualFree(out_buf, size, MEM_FREE);
    return true;
}

int main(int argc, char *argv[])
{
    char*  filename = NULL;
    char* out_filename = NULL;
    if (argc < 3) {
        printf("Required args: <input file> <output file>\n");
        system("pause");
        return -1;
    }
    filename = argv[1];
    out_filename = argv[2];
    if (remap_pe_file(filename, out_filename)) {
        printf("Success!\n");
    }
    system("pause");
    return 0;
}
