#pragma once

#include <windows.h>
#include <stdio.h>

#include "pe_virtual_to_raw.h"

bool sections_virtual_to_raw32(BYTE* payload, SIZE_T payload_size, BYTE* destAddress)
{
    if (payload == NULL) return false;

    IMAGE_NT_HEADERS32* payload_nt_hdr = get_nt_hrds32(payload);
    if (payload_nt_hdr == NULL) {
        printf("Invalid payload: %p\n", payload);
        return false;
    }

    IMAGE_FILE_HEADER *fileHdr = &(payload_nt_hdr->FileHeader);

    //copy payload's headers:
    const DWORD kHdrsSize = payload_nt_hdr->OptionalHeader.SizeOfHeaders;
    memcpy(destAddress, payload, kHdrsSize);

    const DWORD kOptHdrSize = fileHdr->SizeOfOptionalHeader;

    LPVOID secptr = &(payload_nt_hdr->OptionalHeader);
    secptr = LPVOID((ULONGLONG) secptr + kOptHdrSize);

    //copy all the sections, one by one:
    printf("Coping sections locally:\n");

    printf("Coping sections locally:\n");
    for (WORD i = 0; i < fileHdr->NumberOfSections; i++) {
       PIMAGE_SECTION_HEADER next_sec = (PIMAGE_SECTION_HEADER)((ULONGLONG)secptr + (IMAGE_SIZEOF_SECTION_HEADER * i));

       LPVOID section_mapped = (BYTE*) payload + next_sec->VirtualAddress;
       LPVOID section_raw_ptr = destAddress + next_sec->PointerToRawData;

       memcpy(section_raw_ptr, section_mapped, next_sec->SizeOfRawData);
       printf("[+] %s to: %p\n", next_sec->Name, section_raw_ptr);
    }
    return true;
}

bool sections_virtual_to_raw64(BYTE* payload, SIZE_T payload_size, BYTE* destAddress)
{
    if (payload == NULL) return false;

    IMAGE_NT_HEADERS64* payload_nt_hdr = get_nt_hrds64(payload);
    if (payload_nt_hdr == NULL) {
        printf("Invalid payload: %p\n", payload);
        return false;
    }

    IMAGE_FILE_HEADER *fileHdr = &(payload_nt_hdr->FileHeader);

    //copy payload's headers:
    const DWORD kHdrsSize = payload_nt_hdr->OptionalHeader.SizeOfHeaders;
    memcpy(destAddress, payload, kHdrsSize);

    const DWORD kOptHdrSize = fileHdr->SizeOfOptionalHeader;

    LPVOID secptr = &(payload_nt_hdr->OptionalHeader);
    secptr = LPVOID((ULONGLONG) secptr + kOptHdrSize);

    //copy all the sections, one by one:
    printf("Coping sections locally:\n");
    for (WORD i = 0; i < fileHdr->NumberOfSections; i++) {
       PIMAGE_SECTION_HEADER next_sec = (PIMAGE_SECTION_HEADER)((ULONGLONG)secptr + (IMAGE_SIZEOF_SECTION_HEADER * i));

       LPVOID section_mapped = (BYTE*) payload + next_sec->VirtualAddress;
       LPVOID section_raw_ptr = destAddress + next_sec->PointerToRawData;

       memcpy(section_raw_ptr, section_mapped, next_sec->SizeOfRawData);
       printf("[+] %s to: %p\n", next_sec->Name, section_raw_ptr);
    }
    return true;
}
